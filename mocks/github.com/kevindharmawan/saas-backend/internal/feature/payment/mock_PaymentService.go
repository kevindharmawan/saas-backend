// Code generated by mockery v2.23.4. DO NOT EDIT.

package payment

import (
	model "github.com/kevindharmawan/saas-backend/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// MockPaymentService is an autogenerated mock type for the PaymentService type
type MockPaymentService struct {
	mock.Mock
}

type MockPaymentService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPaymentService) EXPECT() *MockPaymentService_Expecter {
	return &MockPaymentService_Expecter{mock: &_m.Mock}
}

// AddCreditCard provides a mock function with given fields: user, cardToken
func (_m *MockPaymentService) AddCreditCard(user *model.User, cardToken string) (*model.Card, *model.AppError) {
	ret := _m.Called(user, cardToken)

	var r0 *model.Card
	var r1 *model.AppError
	if rf, ok := ret.Get(0).(func(*model.User, string) (*model.Card, *model.AppError)); ok {
		return rf(user, cardToken)
	}
	if rf, ok := ret.Get(0).(func(*model.User, string) *model.Card); ok {
		r0 = rf(user, cardToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Card)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.User, string) *model.AppError); ok {
		r1 = rf(user, cardToken)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

// MockPaymentService_AddCreditCard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddCreditCard'
type MockPaymentService_AddCreditCard_Call struct {
	*mock.Call
}

// AddCreditCard is a helper method to define mock.On call
//   - user *model.User
//   - cardToken string
func (_e *MockPaymentService_Expecter) AddCreditCard(user interface{}, cardToken interface{}) *MockPaymentService_AddCreditCard_Call {
	return &MockPaymentService_AddCreditCard_Call{Call: _e.mock.On("AddCreditCard", user, cardToken)}
}

func (_c *MockPaymentService_AddCreditCard_Call) Run(run func(user *model.User, cardToken string)) *MockPaymentService_AddCreditCard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.User), args[1].(string))
	})
	return _c
}

func (_c *MockPaymentService_AddCreditCard_Call) Return(_a0 *model.Card, _a1 *model.AppError) *MockPaymentService_AddCreditCard_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPaymentService_AddCreditCard_Call) RunAndReturn(run func(*model.User, string) (*model.Card, *model.AppError)) *MockPaymentService_AddCreditCard_Call {
	_c.Call.Return(run)
	return _c
}

// CancelSubscription provides a mock function with given fields: user
func (_m *MockPaymentService) CancelSubscription(user *model.User) *model.AppError {
	ret := _m.Called(user)

	var r0 *model.AppError
	if rf, ok := ret.Get(0).(func(*model.User) *model.AppError); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AppError)
		}
	}

	return r0
}

// MockPaymentService_CancelSubscription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CancelSubscription'
type MockPaymentService_CancelSubscription_Call struct {
	*mock.Call
}

// CancelSubscription is a helper method to define mock.On call
//   - user *model.User
func (_e *MockPaymentService_Expecter) CancelSubscription(user interface{}) *MockPaymentService_CancelSubscription_Call {
	return &MockPaymentService_CancelSubscription_Call{Call: _e.mock.On("CancelSubscription", user)}
}

func (_c *MockPaymentService_CancelSubscription_Call) Run(run func(user *model.User)) *MockPaymentService_CancelSubscription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.User))
	})
	return _c
}

func (_c *MockPaymentService_CancelSubscription_Call) Return(_a0 *model.AppError) *MockPaymentService_CancelSubscription_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPaymentService_CancelSubscription_Call) RunAndReturn(run func(*model.User) *model.AppError) *MockPaymentService_CancelSubscription_Call {
	_c.Call.Return(run)
	return _c
}

// GetCreditCards provides a mock function with given fields: user
func (_m *MockPaymentService) GetCreditCards(user *model.User) ([]*model.Card, *model.AppError) {
	ret := _m.Called(user)

	var r0 []*model.Card
	var r1 *model.AppError
	if rf, ok := ret.Get(0).(func(*model.User) ([]*model.Card, *model.AppError)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(*model.User) []*model.Card); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Card)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.User) *model.AppError); ok {
		r1 = rf(user)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

// MockPaymentService_GetCreditCards_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetCreditCards'
type MockPaymentService_GetCreditCards_Call struct {
	*mock.Call
}

// GetCreditCards is a helper method to define mock.On call
//   - user *model.User
func (_e *MockPaymentService_Expecter) GetCreditCards(user interface{}) *MockPaymentService_GetCreditCards_Call {
	return &MockPaymentService_GetCreditCards_Call{Call: _e.mock.On("GetCreditCards", user)}
}

func (_c *MockPaymentService_GetCreditCards_Call) Run(run func(user *model.User)) *MockPaymentService_GetCreditCards_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.User))
	})
	return _c
}

func (_c *MockPaymentService_GetCreditCards_Call) Return(_a0 []*model.Card, _a1 *model.AppError) *MockPaymentService_GetCreditCards_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPaymentService_GetCreditCards_Call) RunAndReturn(run func(*model.User) ([]*model.Card, *model.AppError)) *MockPaymentService_GetCreditCards_Call {
	_c.Call.Return(run)
	return _c
}

// GetSubscriptionInfo provides a mock function with given fields: user
func (_m *MockPaymentService) GetSubscriptionInfo(user *model.User) (*model.Subscription, *model.AppError) {
	ret := _m.Called(user)

	var r0 *model.Subscription
	var r1 *model.AppError
	if rf, ok := ret.Get(0).(func(*model.User) (*model.Subscription, *model.AppError)); ok {
		return rf(user)
	}
	if rf, ok := ret.Get(0).(func(*model.User) *model.Subscription); ok {
		r0 = rf(user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.User) *model.AppError); ok {
		r1 = rf(user)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

// MockPaymentService_GetSubscriptionInfo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSubscriptionInfo'
type MockPaymentService_GetSubscriptionInfo_Call struct {
	*mock.Call
}

// GetSubscriptionInfo is a helper method to define mock.On call
//   - user *model.User
func (_e *MockPaymentService_Expecter) GetSubscriptionInfo(user interface{}) *MockPaymentService_GetSubscriptionInfo_Call {
	return &MockPaymentService_GetSubscriptionInfo_Call{Call: _e.mock.On("GetSubscriptionInfo", user)}
}

func (_c *MockPaymentService_GetSubscriptionInfo_Call) Run(run func(user *model.User)) *MockPaymentService_GetSubscriptionInfo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.User))
	})
	return _c
}

func (_c *MockPaymentService_GetSubscriptionInfo_Call) Return(_a0 *model.Subscription, _a1 *model.AppError) *MockPaymentService_GetSubscriptionInfo_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPaymentService_GetSubscriptionInfo_Call) RunAndReturn(run func(*model.User) (*model.Subscription, *model.AppError)) *MockPaymentService_GetSubscriptionInfo_Call {
	_c.Call.Return(run)
	return _c
}

// RemoveCreditCard provides a mock function with given fields: user, cardId
func (_m *MockPaymentService) RemoveCreditCard(user *model.User, cardId string) *model.AppError {
	ret := _m.Called(user, cardId)

	var r0 *model.AppError
	if rf, ok := ret.Get(0).(func(*model.User, string) *model.AppError); ok {
		r0 = rf(user, cardId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AppError)
		}
	}

	return r0
}

// MockPaymentService_RemoveCreditCard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RemoveCreditCard'
type MockPaymentService_RemoveCreditCard_Call struct {
	*mock.Call
}

// RemoveCreditCard is a helper method to define mock.On call
//   - user *model.User
//   - cardId string
func (_e *MockPaymentService_Expecter) RemoveCreditCard(user interface{}, cardId interface{}) *MockPaymentService_RemoveCreditCard_Call {
	return &MockPaymentService_RemoveCreditCard_Call{Call: _e.mock.On("RemoveCreditCard", user, cardId)}
}

func (_c *MockPaymentService_RemoveCreditCard_Call) Run(run func(user *model.User, cardId string)) *MockPaymentService_RemoveCreditCard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.User), args[1].(string))
	})
	return _c
}

func (_c *MockPaymentService_RemoveCreditCard_Call) Return(_a0 *model.AppError) *MockPaymentService_RemoveCreditCard_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPaymentService_RemoveCreditCard_Call) RunAndReturn(run func(*model.User, string) *model.AppError) *MockPaymentService_RemoveCreditCard_Call {
	_c.Call.Return(run)
	return _c
}

// SetDefaultCreditCard provides a mock function with given fields: user, cardId
func (_m *MockPaymentService) SetDefaultCreditCard(user *model.User, cardId string) *model.AppError {
	ret := _m.Called(user, cardId)

	var r0 *model.AppError
	if rf, ok := ret.Get(0).(func(*model.User, string) *model.AppError); ok {
		r0 = rf(user, cardId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AppError)
		}
	}

	return r0
}

// MockPaymentService_SetDefaultCreditCard_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetDefaultCreditCard'
type MockPaymentService_SetDefaultCreditCard_Call struct {
	*mock.Call
}

// SetDefaultCreditCard is a helper method to define mock.On call
//   - user *model.User
//   - cardId string
func (_e *MockPaymentService_Expecter) SetDefaultCreditCard(user interface{}, cardId interface{}) *MockPaymentService_SetDefaultCreditCard_Call {
	return &MockPaymentService_SetDefaultCreditCard_Call{Call: _e.mock.On("SetDefaultCreditCard", user, cardId)}
}

func (_c *MockPaymentService_SetDefaultCreditCard_Call) Run(run func(user *model.User, cardId string)) *MockPaymentService_SetDefaultCreditCard_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.User), args[1].(string))
	})
	return _c
}

func (_c *MockPaymentService_SetDefaultCreditCard_Call) Return(_a0 *model.AppError) *MockPaymentService_SetDefaultCreditCard_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockPaymentService_SetDefaultCreditCard_Call) RunAndReturn(run func(*model.User, string) *model.AppError) *MockPaymentService_SetDefaultCreditCard_Call {
	_c.Call.Return(run)
	return _c
}

// Subscribe provides a mock function with given fields: user, priceId
func (_m *MockPaymentService) Subscribe(user *model.User, priceId string) (*model.Subscription, *model.AppError) {
	ret := _m.Called(user, priceId)

	var r0 *model.Subscription
	var r1 *model.AppError
	if rf, ok := ret.Get(0).(func(*model.User, string) (*model.Subscription, *model.AppError)); ok {
		return rf(user, priceId)
	}
	if rf, ok := ret.Get(0).(func(*model.User, string) *model.Subscription); ok {
		r0 = rf(user, priceId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Subscription)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.User, string) *model.AppError); ok {
		r1 = rf(user, priceId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

// MockPaymentService_Subscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subscribe'
type MockPaymentService_Subscribe_Call struct {
	*mock.Call
}

// Subscribe is a helper method to define mock.On call
//   - user *model.User
//   - priceId string
func (_e *MockPaymentService_Expecter) Subscribe(user interface{}, priceId interface{}) *MockPaymentService_Subscribe_Call {
	return &MockPaymentService_Subscribe_Call{Call: _e.mock.On("Subscribe", user, priceId)}
}

func (_c *MockPaymentService_Subscribe_Call) Run(run func(user *model.User, priceId string)) *MockPaymentService_Subscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.User), args[1].(string))
	})
	return _c
}

func (_c *MockPaymentService_Subscribe_Call) Return(_a0 *model.Subscription, _a1 *model.AppError) *MockPaymentService_Subscribe_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockPaymentService_Subscribe_Call) RunAndReturn(run func(*model.User, string) (*model.Subscription, *model.AppError)) *MockPaymentService_Subscribe_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPaymentService creates a new instance of MockPaymentService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPaymentService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockPaymentService {
	mock := &MockPaymentService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
