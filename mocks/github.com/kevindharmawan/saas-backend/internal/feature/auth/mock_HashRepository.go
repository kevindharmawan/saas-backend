// Code generated by mockery v2.23.4. DO NOT EDIT.

package auth

import (
	model "github.com/kevindharmawan/saas-backend/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// MockHashRepository is an autogenerated mock type for the HashRepository type
type MockHashRepository struct {
	mock.Mock
}

type MockHashRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHashRepository) EXPECT() *MockHashRepository_Expecter {
	return &MockHashRepository_Expecter{mock: &_m.Mock}
}

// HashString provides a mock function with given fields: str
func (_m *MockHashRepository) HashString(str string) (string, *model.AppError) {
	ret := _m.Called(str)

	var r0 string
	var r1 *model.AppError
	if rf, ok := ret.Get(0).(func(string) (string, *model.AppError)); ok {
		return rf(str)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(str)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) *model.AppError); ok {
		r1 = rf(str)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

// MockHashRepository_HashString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HashString'
type MockHashRepository_HashString_Call struct {
	*mock.Call
}

// HashString is a helper method to define mock.On call
//   - str string
func (_e *MockHashRepository_Expecter) HashString(str interface{}) *MockHashRepository_HashString_Call {
	return &MockHashRepository_HashString_Call{Call: _e.mock.On("HashString", str)}
}

func (_c *MockHashRepository_HashString_Call) Run(run func(str string)) *MockHashRepository_HashString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockHashRepository_HashString_Call) Return(_a0 string, _a1 *model.AppError) *MockHashRepository_HashString_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHashRepository_HashString_Call) RunAndReturn(run func(string) (string, *model.AppError)) *MockHashRepository_HashString_Call {
	_c.Call.Return(run)
	return _c
}

// MatchHashAndString provides a mock function with given fields: hashedStr, str
func (_m *MockHashRepository) MatchHashAndString(hashedStr string, str string) (bool, *model.AppError) {
	ret := _m.Called(hashedStr, str)

	var r0 bool
	var r1 *model.AppError
	if rf, ok := ret.Get(0).(func(string, string) (bool, *model.AppError)); ok {
		return rf(hashedStr, str)
	}
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(hashedStr, str)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(string, string) *model.AppError); ok {
		r1 = rf(hashedStr, str)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

// MockHashRepository_MatchHashAndString_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MatchHashAndString'
type MockHashRepository_MatchHashAndString_Call struct {
	*mock.Call
}

// MatchHashAndString is a helper method to define mock.On call
//   - hashedStr string
//   - str string
func (_e *MockHashRepository_Expecter) MatchHashAndString(hashedStr interface{}, str interface{}) *MockHashRepository_MatchHashAndString_Call {
	return &MockHashRepository_MatchHashAndString_Call{Call: _e.mock.On("MatchHashAndString", hashedStr, str)}
}

func (_c *MockHashRepository_MatchHashAndString_Call) Run(run func(hashedStr string, str string)) *MockHashRepository_MatchHashAndString_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockHashRepository_MatchHashAndString_Call) Return(_a0 bool, _a1 *model.AppError) *MockHashRepository_MatchHashAndString_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHashRepository_MatchHashAndString_Call) RunAndReturn(run func(string, string) (bool, *model.AppError)) *MockHashRepository_MatchHashAndString_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockHashRepository creates a new instance of MockHashRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHashRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHashRepository {
	mock := &MockHashRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
