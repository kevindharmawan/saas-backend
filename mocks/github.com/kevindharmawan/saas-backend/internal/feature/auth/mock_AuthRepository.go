// Code generated by mockery v2.23.4. DO NOT EDIT.

package auth

import (
	model "github.com/kevindharmawan/saas-backend/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// MockAuthRepository is an autogenerated mock type for the AuthRepository type
type MockAuthRepository struct {
	mock.Mock
}

type MockAuthRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthRepository) EXPECT() *MockAuthRepository_Expecter {
	return &MockAuthRepository_Expecter{mock: &_m.Mock}
}

// CreateAuthUser provides a mock function with given fields: _a0
func (_m *MockAuthRepository) CreateAuthUser(_a0 *model.Auth) (int64, *model.AppError) {
	ret := _m.Called(_a0)

	var r0 int64
	var r1 *model.AppError
	if rf, ok := ret.Get(0).(func(*model.Auth) (int64, *model.AppError)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*model.Auth) int64); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(*model.Auth) *model.AppError); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

// MockAuthRepository_CreateAuthUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateAuthUser'
type MockAuthRepository_CreateAuthUser_Call struct {
	*mock.Call
}

// CreateAuthUser is a helper method to define mock.On call
//   - _a0 *model.Auth
func (_e *MockAuthRepository_Expecter) CreateAuthUser(_a0 interface{}) *MockAuthRepository_CreateAuthUser_Call {
	return &MockAuthRepository_CreateAuthUser_Call{Call: _e.mock.On("CreateAuthUser", _a0)}
}

func (_c *MockAuthRepository_CreateAuthUser_Call) Run(run func(_a0 *model.Auth)) *MockAuthRepository_CreateAuthUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.Auth))
	})
	return _c
}

func (_c *MockAuthRepository_CreateAuthUser_Call) Return(_a0 int64, _a1 *model.AppError) *MockAuthRepository_CreateAuthUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthRepository_CreateAuthUser_Call) RunAndReturn(run func(*model.Auth) (int64, *model.AppError)) *MockAuthRepository_CreateAuthUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetAuthUserByEmail provides a mock function with given fields: email
func (_m *MockAuthRepository) GetAuthUserByEmail(email string) (*model.Auth, *model.AppError) {
	ret := _m.Called(email)

	var r0 *model.Auth
	var r1 *model.AppError
	if rf, ok := ret.Get(0).(func(string) (*model.Auth, *model.AppError)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) *model.Auth); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Auth)
		}
	}

	if rf, ok := ret.Get(1).(func(string) *model.AppError); ok {
		r1 = rf(email)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

// MockAuthRepository_GetAuthUserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAuthUserByEmail'
type MockAuthRepository_GetAuthUserByEmail_Call struct {
	*mock.Call
}

// GetAuthUserByEmail is a helper method to define mock.On call
//   - email string
func (_e *MockAuthRepository_Expecter) GetAuthUserByEmail(email interface{}) *MockAuthRepository_GetAuthUserByEmail_Call {
	return &MockAuthRepository_GetAuthUserByEmail_Call{Call: _e.mock.On("GetAuthUserByEmail", email)}
}

func (_c *MockAuthRepository_GetAuthUserByEmail_Call) Run(run func(email string)) *MockAuthRepository_GetAuthUserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockAuthRepository_GetAuthUserByEmail_Call) Return(_a0 *model.Auth, _a1 *model.AppError) *MockAuthRepository_GetAuthUserByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthRepository_GetAuthUserByEmail_Call) RunAndReturn(run func(string) (*model.Auth, *model.AppError)) *MockAuthRepository_GetAuthUserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAuthRepository creates a new instance of MockAuthRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthRepository {
	mock := &MockAuthRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
