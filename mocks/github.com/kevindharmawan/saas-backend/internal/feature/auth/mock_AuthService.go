// Code generated by mockery v2.23.4. DO NOT EDIT.

package auth

import (
	model "github.com/kevindharmawan/saas-backend/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// MockAuthService is an autogenerated mock type for the AuthService type
type MockAuthService struct {
	mock.Mock
}

type MockAuthService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAuthService) EXPECT() *MockAuthService_Expecter {
	return &MockAuthService_Expecter{mock: &_m.Mock}
}

// SignIn provides a mock function with given fields: email, password
func (_m *MockAuthService) SignIn(email string, password string) (*model.Token, *model.AppError) {
	ret := _m.Called(email, password)

	var r0 *model.Token
	var r1 *model.AppError
	if rf, ok := ret.Get(0).(func(string, string) (*model.Token, *model.AppError)); ok {
		return rf(email, password)
	}
	if rf, ok := ret.Get(0).(func(string, string) *model.Token); ok {
		r0 = rf(email, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Token)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) *model.AppError); ok {
		r1 = rf(email, password)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

// MockAuthService_SignIn_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SignIn'
type MockAuthService_SignIn_Call struct {
	*mock.Call
}

// SignIn is a helper method to define mock.On call
//   - email string
//   - password string
func (_e *MockAuthService_Expecter) SignIn(email interface{}, password interface{}) *MockAuthService_SignIn_Call {
	return &MockAuthService_SignIn_Call{Call: _e.mock.On("SignIn", email, password)}
}

func (_c *MockAuthService_SignIn_Call) Run(run func(email string, password string)) *MockAuthService_SignIn_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockAuthService_SignIn_Call) Return(_a0 *model.Token, _a1 *model.AppError) *MockAuthService_SignIn_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthService_SignIn_Call) RunAndReturn(run func(string, string) (*model.Token, *model.AppError)) *MockAuthService_SignIn_Call {
	_c.Call.Return(run)
	return _c
}

// SignUp provides a mock function with given fields: email, password
func (_m *MockAuthService) SignUp(email string, password string) (*model.Token, *model.AppError) {
	ret := _m.Called(email, password)

	var r0 *model.Token
	var r1 *model.AppError
	if rf, ok := ret.Get(0).(func(string, string) (*model.Token, *model.AppError)); ok {
		return rf(email, password)
	}
	if rf, ok := ret.Get(0).(func(string, string) *model.Token); ok {
		r0 = rf(email, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Token)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) *model.AppError); ok {
		r1 = rf(email, password)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

// MockAuthService_SignUp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SignUp'
type MockAuthService_SignUp_Call struct {
	*mock.Call
}

// SignUp is a helper method to define mock.On call
//   - email string
//   - password string
func (_e *MockAuthService_Expecter) SignUp(email interface{}, password interface{}) *MockAuthService_SignUp_Call {
	return &MockAuthService_SignUp_Call{Call: _e.mock.On("SignUp", email, password)}
}

func (_c *MockAuthService_SignUp_Call) Run(run func(email string, password string)) *MockAuthService_SignUp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockAuthService_SignUp_Call) Return(_a0 *model.Token, _a1 *model.AppError) *MockAuthService_SignUp_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthService_SignUp_Call) RunAndReturn(run func(string, string) (*model.Token, *model.AppError)) *MockAuthService_SignUp_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateToken provides a mock function with given fields: token
func (_m *MockAuthService) ValidateToken(token string) (string, *model.AppError) {
	ret := _m.Called(token)

	var r0 string
	var r1 *model.AppError
	if rf, ok := ret.Get(0).(func(string) (string, *model.AppError)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) *model.AppError); ok {
		r1 = rf(token)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

// MockAuthService_ValidateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateToken'
type MockAuthService_ValidateToken_Call struct {
	*mock.Call
}

// ValidateToken is a helper method to define mock.On call
//   - token string
func (_e *MockAuthService_Expecter) ValidateToken(token interface{}) *MockAuthService_ValidateToken_Call {
	return &MockAuthService_ValidateToken_Call{Call: _e.mock.On("ValidateToken", token)}
}

func (_c *MockAuthService_ValidateToken_Call) Run(run func(token string)) *MockAuthService_ValidateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockAuthService_ValidateToken_Call) Return(_a0 string, _a1 *model.AppError) *MockAuthService_ValidateToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAuthService_ValidateToken_Call) RunAndReturn(run func(string) (string, *model.AppError)) *MockAuthService_ValidateToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAuthService creates a new instance of MockAuthService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAuthService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAuthService {
	mock := &MockAuthService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
