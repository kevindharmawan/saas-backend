// Code generated by mockery v2.23.4. DO NOT EDIT.

package user

import (
	model "github.com/kevindharmawan/saas-backend/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// MockUserRepository is an autogenerated mock type for the UserRepository type
type MockUserRepository struct {
	mock.Mock
}

type MockUserRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserRepository) EXPECT() *MockUserRepository_Expecter {
	return &MockUserRepository_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function with given fields: _a0
func (_m *MockUserRepository) CreateUser(_a0 *model.User) (*model.User, *model.AppError) {
	ret := _m.Called(_a0)

	var r0 *model.User
	var r1 *model.AppError
	if rf, ok := ret.Get(0).(func(*model.User) (*model.User, *model.AppError)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*model.User) *model.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.User) *model.AppError); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

// MockUserRepository_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockUserRepository_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - _a0 *model.User
func (_e *MockUserRepository_Expecter) CreateUser(_a0 interface{}) *MockUserRepository_CreateUser_Call {
	return &MockUserRepository_CreateUser_Call{Call: _e.mock.On("CreateUser", _a0)}
}

func (_c *MockUserRepository_CreateUser_Call) Run(run func(_a0 *model.User)) *MockUserRepository_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.User))
	})
	return _c
}

func (_c *MockUserRepository_CreateUser_Call) Return(_a0 *model.User, _a1 *model.AppError) *MockUserRepository_CreateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserRepository_CreateUser_Call) RunAndReturn(run func(*model.User) (*model.User, *model.AppError)) *MockUserRepository_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteUser provides a mock function with given fields: id
func (_m *MockUserRepository) DeleteUser(id int64) *model.AppError {
	ret := _m.Called(id)

	var r0 *model.AppError
	if rf, ok := ret.Get(0).(func(int64) *model.AppError); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AppError)
		}
	}

	return r0
}

// MockUserRepository_DeleteUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteUser'
type MockUserRepository_DeleteUser_Call struct {
	*mock.Call
}

// DeleteUser is a helper method to define mock.On call
//   - id int64
func (_e *MockUserRepository_Expecter) DeleteUser(id interface{}) *MockUserRepository_DeleteUser_Call {
	return &MockUserRepository_DeleteUser_Call{Call: _e.mock.On("DeleteUser", id)}
}

func (_c *MockUserRepository_DeleteUser_Call) Run(run func(id int64)) *MockUserRepository_DeleteUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockUserRepository_DeleteUser_Call) Return(_a0 *model.AppError) *MockUserRepository_DeleteUser_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserRepository_DeleteUser_Call) RunAndReturn(run func(int64) *model.AppError) *MockUserRepository_DeleteUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByAuthId provides a mock function with given fields: authId
func (_m *MockUserRepository) GetUserByAuthId(authId string) (*model.User, *model.AppError) {
	ret := _m.Called(authId)

	var r0 *model.User
	var r1 *model.AppError
	if rf, ok := ret.Get(0).(func(string) (*model.User, *model.AppError)); ok {
		return rf(authId)
	}
	if rf, ok := ret.Get(0).(func(string) *model.User); ok {
		r0 = rf(authId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) *model.AppError); ok {
		r1 = rf(authId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

// MockUserRepository_GetUserByAuthId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByAuthId'
type MockUserRepository_GetUserByAuthId_Call struct {
	*mock.Call
}

// GetUserByAuthId is a helper method to define mock.On call
//   - authId string
func (_e *MockUserRepository_Expecter) GetUserByAuthId(authId interface{}) *MockUserRepository_GetUserByAuthId_Call {
	return &MockUserRepository_GetUserByAuthId_Call{Call: _e.mock.On("GetUserByAuthId", authId)}
}

func (_c *MockUserRepository_GetUserByAuthId_Call) Run(run func(authId string)) *MockUserRepository_GetUserByAuthId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockUserRepository_GetUserByAuthId_Call) Return(_a0 *model.User, _a1 *model.AppError) *MockUserRepository_GetUserByAuthId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserRepository_GetUserByAuthId_Call) RunAndReturn(run func(string) (*model.User, *model.AppError)) *MockUserRepository_GetUserByAuthId_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByCustomerId provides a mock function with given fields: customerId
func (_m *MockUserRepository) GetUserByCustomerId(customerId string) (*model.User, *model.AppError) {
	ret := _m.Called(customerId)

	var r0 *model.User
	var r1 *model.AppError
	if rf, ok := ret.Get(0).(func(string) (*model.User, *model.AppError)); ok {
		return rf(customerId)
	}
	if rf, ok := ret.Get(0).(func(string) *model.User); ok {
		r0 = rf(customerId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) *model.AppError); ok {
		r1 = rf(customerId)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

// MockUserRepository_GetUserByCustomerId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByCustomerId'
type MockUserRepository_GetUserByCustomerId_Call struct {
	*mock.Call
}

// GetUserByCustomerId is a helper method to define mock.On call
//   - customerId string
func (_e *MockUserRepository_Expecter) GetUserByCustomerId(customerId interface{}) *MockUserRepository_GetUserByCustomerId_Call {
	return &MockUserRepository_GetUserByCustomerId_Call{Call: _e.mock.On("GetUserByCustomerId", customerId)}
}

func (_c *MockUserRepository_GetUserByCustomerId_Call) Run(run func(customerId string)) *MockUserRepository_GetUserByCustomerId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockUserRepository_GetUserByCustomerId_Call) Return(_a0 *model.User, _a1 *model.AppError) *MockUserRepository_GetUserByCustomerId_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserRepository_GetUserByCustomerId_Call) RunAndReturn(run func(string) (*model.User, *model.AppError)) *MockUserRepository_GetUserByCustomerId_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByEmail provides a mock function with given fields: email
func (_m *MockUserRepository) GetUserByEmail(email string) (*model.User, *model.AppError) {
	ret := _m.Called(email)

	var r0 *model.User
	var r1 *model.AppError
	if rf, ok := ret.Get(0).(func(string) (*model.User, *model.AppError)); ok {
		return rf(email)
	}
	if rf, ok := ret.Get(0).(func(string) *model.User); ok {
		r0 = rf(email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) *model.AppError); ok {
		r1 = rf(email)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

// MockUserRepository_GetUserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByEmail'
type MockUserRepository_GetUserByEmail_Call struct {
	*mock.Call
}

// GetUserByEmail is a helper method to define mock.On call
//   - email string
func (_e *MockUserRepository_Expecter) GetUserByEmail(email interface{}) *MockUserRepository_GetUserByEmail_Call {
	return &MockUserRepository_GetUserByEmail_Call{Call: _e.mock.On("GetUserByEmail", email)}
}

func (_c *MockUserRepository_GetUserByEmail_Call) Run(run func(email string)) *MockUserRepository_GetUserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockUserRepository_GetUserByEmail_Call) Return(_a0 *model.User, _a1 *model.AppError) *MockUserRepository_GetUserByEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserRepository_GetUserByEmail_Call) RunAndReturn(run func(string) (*model.User, *model.AppError)) *MockUserRepository_GetUserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserById provides a mock function with given fields: id
func (_m *MockUserRepository) GetUserById(id int64) (*model.User, *model.AppError) {
	ret := _m.Called(id)

	var r0 *model.User
	var r1 *model.AppError
	if rf, ok := ret.Get(0).(func(int64) (*model.User, *model.AppError)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int64) *model.User); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) *model.AppError); ok {
		r1 = rf(id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

// MockUserRepository_GetUserById_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserById'
type MockUserRepository_GetUserById_Call struct {
	*mock.Call
}

// GetUserById is a helper method to define mock.On call
//   - id int64
func (_e *MockUserRepository_Expecter) GetUserById(id interface{}) *MockUserRepository_GetUserById_Call {
	return &MockUserRepository_GetUserById_Call{Call: _e.mock.On("GetUserById", id)}
}

func (_c *MockUserRepository_GetUserById_Call) Run(run func(id int64)) *MockUserRepository_GetUserById_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int64))
	})
	return _c
}

func (_c *MockUserRepository_GetUserById_Call) Return(_a0 *model.User, _a1 *model.AppError) *MockUserRepository_GetUserById_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserRepository_GetUserById_Call) RunAndReturn(run func(int64) (*model.User, *model.AppError)) *MockUserRepository_GetUserById_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function with given fields: _a0
func (_m *MockUserRepository) UpdateUser(_a0 *model.User) (*model.User, *model.AppError) {
	ret := _m.Called(_a0)

	var r0 *model.User
	var r1 *model.AppError
	if rf, ok := ret.Get(0).(func(*model.User) (*model.User, *model.AppError)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*model.User) *model.User); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.User) *model.AppError); ok {
		r1 = rf(_a0)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.AppError)
		}
	}

	return r0, r1
}

// MockUserRepository_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type MockUserRepository_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - _a0 *model.User
func (_e *MockUserRepository_Expecter) UpdateUser(_a0 interface{}) *MockUserRepository_UpdateUser_Call {
	return &MockUserRepository_UpdateUser_Call{Call: _e.mock.On("UpdateUser", _a0)}
}

func (_c *MockUserRepository_UpdateUser_Call) Run(run func(_a0 *model.User)) *MockUserRepository_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*model.User))
	})
	return _c
}

func (_c *MockUserRepository_UpdateUser_Call) Return(_a0 *model.User, _a1 *model.AppError) *MockUserRepository_UpdateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserRepository_UpdateUser_Call) RunAndReturn(run func(*model.User) (*model.User, *model.AppError)) *MockUserRepository_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserRepository creates a new instance of MockUserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserRepository {
	mock := &MockUserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
